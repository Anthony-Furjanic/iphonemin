
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>How-To Page</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
    }

    header {
      background-color: #333;
      color: #fff;
      padding: 10px;
      text-align: center;
    }

    main {
      max-width: 800px;
      margin: 20px auto;
      padding: 20px;
      background-color: #cacaca;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    ul {
      list-style-type: none;
      padding: 0;
    }

    li {
      margin-bottom: 10px;
    }

    a {
      text-decoration: none;
      color: #667c99;
      font-size: 1.em; /* Match the default font size of h2 */
  font-weight: bold; /* Match the default font weight of h2 */
    }
    h2{
      font-size: 15px;
      color: #4c4c4c;
    }
  </style>
</head>
<body>

  <header>
    <h1>how to make changes</h1>
  </header>

  <main>
    <h2>Welcome to the How-To section of the admin version of the Corp Mobility Simulator site! if you are here you are you are looking to make changes to the site.  A few key things to remember...

<br>
<br>
<br>
        First and foremost, dont be nervous. As long as you follow the Golden rule and dont make any changes to the master template , everything is reversible!
        
        (even if you do make a change to the master copy its still reversible in most if not all cases, but as good practice you want to avoid this if possible)
        
<br>
<br>
<br>   
         If you do make any changes that cause an unintended change to the site ,  vs code holds a localized timeline of recent saves to the project so you can always expand the timeline and go to a recent version before you made the change (see how to section "how to revert to a previous save in the project")
        
<br>
<br>
<br>
         Anything you see in green text is commentation on the code and not part of the code itself , I have notated code that is crucial to the inner workings of the application with  the notation at the top of the code ***CRUCIAL APPLICATION STRUCTURE, NOT RECCOMENDED TO MAKE ANY CHANGES*** and at the end of that section you will see the notation ***END OF CRUCIAL STRUCTURE SECTION***
<br>
    
        
         This means that the code plays a crucial role in the inner workings of the application, it should not be changed by anyone unless they have at least a high end novice to Low end intermediate knowledge of HTML,CSS, and Javascript
<br>
<br>
<br>
        
        On the flipside of that , there are sections of code that are able to be simply changed by design and require little to no coding knowledge to edit. They have clearly listed How-to instructions in the sections below and can be edited with zero or near zero effects to the inner workings of the application. 
        
        
        </h2>
    <ul>
      <li><a href="changeappicons.html">Change app icons&#128736;</a></li>
      <li><a href="changepagebackground.html">Change page backround &#128736;</a></li>
      <li><a href="#option3">Revert to a previous save in the project &#128736;</a></li>
      <li><a href="changeappicons.html">Change app icon name &#128736;</a></li>
      <li><a href="changepagebackground.html">Change &#128736;</a></li>

      
      <!-- Add more options as needed -->
    </ul>
  </main>

</body>
</html>

document.getElementById("myButton").addEventListener("click", function() {
        window.location.href = "your_page_url.html";
    });


function sendEmail() {
  // Replace 'recipient@example.com' with the actual email address
  var emailAddress = 'recipient@example.com';

  // Replace 'Subject' and 'Body' with your desired email subject and body
  var emailSubject = 'Your Custom Subject';
  var emailBody = 'Your Custom Body';

  // Construct the mailto URL
  var mailtoURL = 'mailto:' + emailAddress + '?subject=' + encodeURIComponent(emailSubject) + '&body=' + encodeURIComponent(emailBody);

  // Open the default email client
  window.location.href = mailtoURL;
}





MENU ADD AND HOME BUTTON BAR ADD



#swipeUpBar {
  position: relative;
  width: 30%;
  height: 4px; /* Adjust the height as needed */
  background-color: rgb(161, 156, 156);
  border-top: 1px solid #ccc; /* Optional: Add a border for separation */
  cursor: pointer;
 border-radius: 60px;
 align-self: center;
 margin-bottom: 50px;
 margin-top: -5px;
 margin-left: 80px;
}

/* Add a swipe-up animation if desired */
#swipeUpBar:hover {
  background-color: #ebebeb; /* Change color on hover */
}
header {
    position: absolute;
    top: 0;
    width: 100%;
    color: #eaeaea;
    background-color: #000;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: space-between; /* Updated to space between items */
    padding: 0 15px; /* Add padding to create space around the button */
}

.header-title {
    /* Add these styles to center the title */
    text-align: center;
    flex-grow: 1;
    font-size: 25px;
}

.menu-btn {
    font-size: 20px;
    cursor: pointer;
    background: none;
    border: none;
    color: #fff;
}
.nav-menu {
    position: absolute;
    top: 50px; /* Adjust the top position to match the height of your header */
    left: 0;
    width: 15%;
    background-color: #333;
    /* padding: 10px; */
    transition: top 0.3s ease; /* Add transition for smooth animation */
    display: none; /* Hide the menu by default */ 
    background-color: transparent;
    /* border: 3px solid grey; */
    
}
   


.nav-menu ul {
    list-style: none;
    padding: 0;

    margin: 0;
}




a{
    color: #818286;
    text-decoration: none;
}
.nav-menu ul li {
    border-top: 1px solid rgb(191, 191, 191);
    border-bottom: 1px solid rgb(173, 173, 173);
    height: 35px;
    list-style: none;
    margin: 0;
    padding: 0;
}

.nav-menu ul li a {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%; /* Ensure the anchor takes the full height of the list item */
    text-decoration: none;

}
.nav-menu li a:hover{
    background-color: #666666;
  color: #ffffff;
}
  </style>
</head>
<body>
    <header>
        <button class="menu-btn">â˜°</button>
        <div class="header-title">Corpmobile Simulator 1.0 Admin</div>
        
        <!-- Other header content or navigation goes here -->
    </header>
    <div class="nav-menu">
        <ul>
            <li><a href="#">Menu Item 1</a></li>
            <li><a href="#">Menu Item 2</a></li>
            <li><a href="#">Menu Item 3</a></li>
            <!-- Add more menu items as needed -->
        </ul>
    </div>



function goBackToHome() {
    window.location.href="https://www.google.com/"
}


document.addEventListener('DOMContentLoaded', function () {
            const menuBtn = document.querySelector('.menu-btn');
            const navMenu = document.querySelector('.nav-menu');

            menuBtn.addEventListener('click', function () {
                navMenu.style.display = (navMenu.style.display === 'block') ? 'none' : 'block';
            });
        });




DRAGGABLE PAGE

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Draggable Circle</title>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    #container {
      position: relative;
      width: 300px;
      height: 300px;
      border: 2px solid #333;
      overflow: hidden; /* Ensure circle stays within container */
    }

    .draggable-circle {
      position: absolute;
      width: 50px;
      height: 50px;
      background-color: #3498db;
      border-radius: 50%;
      cursor: grab;
      user-select: none;
      opacity: 0.8;
      transition: opacity 0.3s;
      left: calc(100% - 50px); /* Touch the right side */
      top: calc(100% - 50px - 10px); /* 10px from the bottom edge */
    }
  </style>
</head>
<body>

<div id="container">
  <div id="circle" class="draggable-circle"></div>
</div>

<script>
  const circle = document.getElementById('circle');
  let offsetX, offsetY, isDragging = false;

  circle.addEventListener('mousedown', (e) => {
    isDragging = true;
    offsetX = e.clientX - circle.getBoundingClientRect().left;
    offsetY = e.clientY - circle.getBoundingClientRect().top;
    circle.style.cursor = 'grabbing';
    circle.style.opacity = 1; // Make circle fully opaque while dragging
  });

  document.addEventListener('mousemove', (e) => {
    if (isDragging) {
      const containerRect = document.getElementById('container').getBoundingClientRect();
      const x = e.clientX - offsetX - containerRect.left;
      const y = e.clientY - offsetY - containerRect.top;

      // Ensure circle stays within container
      const maxX = containerRect.width - circle.offsetWidth; // Adjusted to allow touching the right side
      const maxY = containerRect.height - circle.offsetHeight - 10; // 10px from the bottom edge

      circle.style.left = `${Math.min(Math.max(x, 0), maxX)}px`;
      circle.style.top = `${Math.min(Math.max(y, 0), maxY)}px`;
    }
  });

  document.addEventListener('mouseup', () => {
    if (isDragging) {
      isDragging = false;
      circle.style.cursor = 'grab';
      circle.style.opacity = 0.8; // Return opacity to initial value when not dragging
    }
  });
</script>

</body>
</html>



